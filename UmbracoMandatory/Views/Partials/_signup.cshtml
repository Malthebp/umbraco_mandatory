@inherits Umbraco.Web.Mvc.UmbracoTemplatePage


@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Controllers

@{
    @*
        You can specify a custom member type alias in the constructor, the default is 'Member'
        for example, to use 'Custom Member' you'd use this syntax:

        var registerModel = Members.CreateRegistrationModel("Custom Member");
    *@

    var registerModel = Members.CreateRegistrationModel("prospect");

    @*
        Configurable here:

        registerModel.RedirectUrl       - Optional. What path to redirect to if registration is successful.
                                          By default the member will be redirected to the current umbraco page
                                          unless this is specified.

        registerModel.UsernameIsEmail   - the default is true
                                          if you want the username to be different from the email
                                          address, set this to true and add a new Username field in
                                          the form below

                                          @Html.LabelFor(m => registerModel.Username)
                                          @Html.TextBoxFor(m => registerModel.Username)
                                          @Html.ValidationMessageFor(m => registerModel.Username)
    *@

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("/umbraco_client/ui/jquery.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.min.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.unobtrusive.min.js");

    var success = TempData["FormSuccess"] != null;
}

@*NOTE: This RenderJsHere code should be put on your main template page where the rest of your script tags are placed*@
@Html.RenderJsHere()

@if (success)
{

    var m = Membership.GetUser();
    var memberService = ApplicationContext.Current.Services.MemberService;
    var member = memberService.GetByEmail(m.Email);

    ApplicationContext.Current.Services.MemberService.AssignRole((int)m.ProviderUserKey, "Prospect");

    <p>Registration succeeeded.</p>
    <p>Logged in with @m.Email</p>
}
else
{
    using (Html.BeginUmbracoForm<UmbRegisterController>("HandleRegisterMember"))
    {
        <div class="container col-md-6 mt-5">

            @Html.ValidationSummary("registerModel", true)
            <div class="form-group">
                @Html.LabelFor(m => registerModel.Name)
                @Html.TextBoxFor(m => registerModel.Name, new { @class="form-control"})
                @Html.ValidationMessageFor(m => registerModel.Name)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => registerModel.Email)
                @Html.TextBoxFor(m => registerModel.Email, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => registerModel.Email)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => registerModel.Password)
                @Html.PasswordFor(m => registerModel.Password, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => registerModel.Password)
            </div>

            @if (registerModel.MemberProperties != null)
            {
                for (var i = 0; i < registerModel.MemberProperties.Count; i++)
                {
                    <div class="form-group">
                        @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)
                        @Html.EditorFor(m => registerModel.MemberProperties[i].Value, new { htmlAttributes = new { @class = "form-control" }} )
                        @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
                     </div>
                }
            }

            @Html.HiddenFor(m => registerModel.MemberTypeAlias)
            @Html.HiddenFor(m => registerModel.RedirectUrl)
            @Html.HiddenFor(m => registerModel.UsernameIsEmail)

            <button class="btn btn-primary">Register</button>
        </div>
    }
}